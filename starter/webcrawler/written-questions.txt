Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

    I believe it is related to the fact that the parser needs to wait until all substasks are done before starting executing.


Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

        I believe the issue is related to hardware limitations since though you run the application as parallel app,
        you still need a multi-processor PC to notice any improvement in performance and the fact that you want to run
        a multithreaded application in a single CPU, could make the application slower than running the sequential app.

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?

        when you got a multiprocessor PC it should run faster than the sequential since having different CPUs allows the application
        to create multiple threads and run subroutines at the same time.


Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?

    What is being addressed is performance profiling since we want to record the running time of methods with the Profiled annotations and not all methods,
    evaluating the performance of each method.

   (b) What are the join points of the Profiler in the web crawler program?
   The methods that have the annotation @Profiled will be the ones that will be checked.


Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.

The 3 different DP I have identified are the following:

    - Builder: This DP is implemented to handle the creations of CrawlerConfiguration objects through Jackson plugin
    which allows serialization of objects to JSON and the other way around. Here is applied to parse the configuration in JSON format
    to CrawlerConfiguration objets. What I liked about this DP is that it allows flexibility since it is easy to add more
    parameters if needed and encourages immutability and also method chaining. What I dislike is the amount of code needed
    to implement it which increases complexity.

    - Abstract Factory: This DP is implemented to handle the PageParserImpls creation through the PageParser get()
    method in the PageParserFactory Class.
    This is accomplished by the implementation of the interface PageParser which has the get() method that is called
    every time a new PageParserIml object needs to be created passing only the url parameter and not the other two parameters.
    I liked the level of abstraction this DP has since it allows to hide construction details from the world.
    What I dislike is the level of complexity added with extra classes and interfaces.

    - Dependency injection:
    This DP is used in the WebCrawlerMain.java to inject a WebCrawler and Profiler objects. This is useful since it allows
    the DI Framework to handle the creation of these objects automatically without having to instantiate them.
    What I dislike about this DP is that sometimes it is a bit hard to follow the code and all the extra configuration needed for work.



